########################################################
# This is the main config file for dehydrated          #
#                                                      #
# This file is looked for in the following locations:  #
# $SCRIPTDIR/config (next to this script)              #
# /usr/local/etc/dehydrated/config                     #
# /etc/dehydrated/config                               #
# ${PWD}/config (in current working-directory)         #
#                                                      #
# Default values of this config are in comments        #
########################################################

# Resolve names to addresses of IP version only. (curl)
# supported values: 4, 6
# default: <unset>
#IP_VERSION=
{% if dehydrated_cfg.ip_version is defined -%}
IP_VERSION="{{ dehydrated_cfg.ip_version }}"
{% endif %}

# Path to certificate authority (default: https://acme-v01.api.letsencrypt.org/directory)
#CA="https://acme-v01.api.letsencrypt.org/directory"
{% if dehydrated_cfg.ca is defined -%}
CA="{{ dehydrated_cfg.ca }}"
{% endif %}

# Path to certificate authority license terms redirect (default: https://acme-v01.api.letsencrypt.org/terms)
#CA_TERMS="https://acme-v01.api.letsencrypt.org/terms"

# Path to license agreement (default: <unset>)
#LICENSE=""

# Which challenge should be used? Currently http-01 and dns-01 are supported
#CHALLENGETYPE="http-01"
{% if dehydrated_cfg.challengetype is defined -%}
CHALLENGETYPE="{{ dehydrated_cfg.challengetype }}"
{% endif %}

# Path to a directory containing additional config files, allowing to override
# the defaults found in the main configuration file. Additional config files
# in this directory needs to be named with a '.sh' ending.
# default: <unset>
CONFIG_D="${BASEDIR}/conf.d"

# Base directory for account key, generated certificates and list of domains (default: $SCRIPTDIR -- uses config directory if undefined)
#BASEDIR=$SCRIPTDIR

# File containing the list of domains to request certificates for (default: $BASEDIR/domains.txt)
#DOMAINS_TXT="${BASEDIR}/domains.txt"

# Output directory for generated certificates
#CERTDIR="${BASEDIR}/certs"

# Directory for account keys and registration information
#ACCOUNTDIR="${BASEDIR}/accounts"

# Output directory for challenge-tokens to be served by webserver or deployed in HOOK (default: /var/www/dehydrated)
#WELLKNOWN="/var/www/dehydrated"
{% if dehydrated_cfg.challengetype is defined -%}
WELLKNOWN="{{ dehydrated_cfg.wellknown }}"
{% endif %}

# Default keysize for private keys (default: 4096)
#KEYSIZE="4096"
{% if dehydrated_cfg.keysize is defined -%}
KEYSIZE="{{ dehydrated_cfg.keysize }}"
{% endif %}

# Path to openssl config file (default: <unset> - tries to figure out system default)
#OPENSSL_CNF=

# Program or function called in certain situations
#
# After generating the challenge-response, or after failed challenge (in this case altname is empty)
# Given arguments: clean_challenge|deploy_challenge altname token-filename token-content
#
# After successfully signing certificate
# Given arguments: deploy_cert domain path/to/privkey.pem path/to/cert.pem path/to/fullchain.pem
#
# BASEDIR and WELLKNOWN variables are exported and can be used in an external program
# default: <unset>
HOOK="{{ dehydrated_cfg.hook }}"

# Chain clean_challenge|deploy_challenge arguments together into one hook call per certificate (default: no)
#HOOK_CHAIN="no"
{% if dehydrated_cfg.hook_chain is defined -%}
HOOK_CHAIN="{{ 'yes' if dehydrated_cfg.hook_chain else 'no' }}"
{% endif %}

# Minimum days before expiration to automatically renew certificate (default: 30)
#RENEW_DAYS="30"
{% if dehydrated_cfg.renew_days is defined -%}
RENEW_DAYS="{{ dehydrated_cfg.renew_days }}"
{% endif %}

# Regenerate private keys instead of just signing new certificates on renewal (default: yes)
PRIVATE_KEY_RENEW="{{ 'yes' if dehydrated_cfg.private_key_renew else 'no' }}"

# Create an extra private key for rollover (default: no)
#PRIVATE_KEY_ROLLOVER="no"
{% if dehydrated_cfg.private_key_rollover is defined -%}
PRIVATE_KEY_ROLLOVER="{{ 'yes' if dehydrated_cfg.private_key_rollover else 'no' }}"
{% endif %}

# Which public key algorithm should be used? Supported: rsa, prime256v1 and secp384r1
#KEY_ALGO=rsa
{% if dehydrated_cfg.key_algo is defined -%}
KEY_ALGO="{{ dehydrated_cfg.key_algo }}"
{% endif %}

# E-mail to use during the registration (default: <unset>)
#CONTACT_EMAIL=
{% if dehydrated_cfg.contact_email is defined -%}
CONTACT_EMAIL="{{ dehydrated_cfg.contact_email }}"
{% endif %}

# Lockfile location, to prevent concurrent access (default: $BASEDIR/lock)
LOCKFILE="/run/dehydrated/lock"

# Option to add CSR-flag indicating OCSP stapling to be mandatory (default: no)
#OCSP_MUST_STAPLE="no"
{% if dehydrated_cfg.ocsp_must_staple is defined -%}
OCSP_MUST_STAPLE="{{ 'yes' if dehydrated_cfg.ocsp_must_staple else 'no' }}"
{% endif %}
